--- ../src-base/minecraft/net/minecraft/entity/player/EntityPlayer.java
+++ ../src-work/minecraft/net/minecraft/entity/player/EntityPlayer.java
@@ -174,6 +174,7 @@
 
     public void onUpdate()
     {
+        net.minecraftforge.fml.common.FMLCommonHandler.instance().onPlayerPreTick(this);
         this.noClip = this.isSpectator();
 
         if (this.isSpectator())
@@ -205,6 +206,7 @@
                 {
                     this.wakeUpPlayer(false, true, true);
                 }
+                }
             }
         }
         else if (this.sleepTimer > 0)
@@ -219,7 +221,7 @@
 
         super.onUpdate();
 
-        if (!this.worldObj.isRemote && this.openContainer != null && !this.openContainer.canInteractWith(this))
+        if (!this.worldObj.isRemote && this.openContainer != null && !net.minecraftforge.common.ForgeHooks.canInteractWith(this, this.openContainer))
         {
             this.closeScreen();
             this.openContainer = this.inventoryContainer;
@@ -360,6 +362,7 @@
                 this.setSize(f, f1);
             }
         }
+        net.minecraftforge.fml.common.FMLCommonHandler.instance().onPlayerPostTick(this);
     }
 
     public int getMaxInPortalTime()
@@ -576,11 +579,15 @@
 
     public void onDeath(DamageSource cause)
     {
+        if (net.minecraftforge.common.ForgeHooks.onLivingDeath(this,  cause)) return;
         super.onDeath(cause);
         this.setSize(0.2F, 0.2F);
         this.setPosition(this.posX, this.posY, this.posZ);
         this.motionY = 0.10000000149011612D;
 
+        captureDrops = true;
+        capturedDrops.clear();
+
         if (this.getName().equals("Notch"))
         {
             this.dropItem(new ItemStack(Items.apple, 1), true, false);
@@ -591,6 +598,9 @@
             this.inventory.dropAllItems();
         }
 
+        captureDrops = false;
+        if (!worldObj.isRemote) net.minecraftforge.event.ForgeEventFactory.onPlayerDrops(this, cause, capturedDrops, recentlyHit > 0);
+
         if (cause != null)
         {
             this.motionX = (double)(-MathHelper.cos((this.attackedAtYaw + this.rotationYaw) * 0.017453292F) * 0.1F);
@@ -678,12 +688,25 @@
 
     public EntityItem dropOneItem(boolean dropAll)
     {
-        return this.dropItem(this.inventory.decrStackSize(this.inventory.currentItem, dropAll && this.inventory.getCurrentItem() != null ? this.inventory.getCurrentItem().stackSize : 1), false, true);
+        ItemStack stack = inventory.getCurrentItem();
+
+        if (stack == null)
+        {
+            return null;
+        }
+
+        if (stack.getItem().onDroppedByPlayer(stack, this))
+        {
+            int count = dropAll && this.inventory.getCurrentItem() != null ? this.inventory.getCurrentItem().stackSize : 1;
+            return net.minecraftforge.common.ForgeHooks.onPlayerTossEvent(this, inventory.decrStackSize(inventory.currentItem, count), true);
+        }
+
+        return null;
     }
 
     public EntityItem dropPlayerItemWithRandomChoice(ItemStack itemStackIn, boolean unused)
     {
-        return this.dropItem(itemStackIn, false, false);
+        return net.minecraftforge.common.ForgeHooks.onPlayerTossEvent(this, itemStackIn, false);
     }
 
     public EntityItem dropItem(ItemStack droppedItem, boolean dropAround, boolean traceItem)
@@ -746,15 +769,24 @@
 
     protected ItemStack func_184816_a(EntityItem p_184816_1_)
     {
+        if (captureDrops) capturedDrops.add(p_184816_1_);
+        else // Forge: Don't indent to keep patch smaller.
         this.worldObj.spawnEntityInWorld(p_184816_1_);
         ItemStack itemstack = p_184816_1_.getEntityItem();
         return itemstack;
     }
 
+    @Deprecated //Use location sensitive version below
     public float func_184813_a(IBlockState p_184813_1_)
     {
-        float f = this.inventory.func_184438_a(p_184813_1_);
+        return getBreakSpeed(p_184813_1_, new BlockPos(0, -1, 0));
+    }
 
+    public float getBreakSpeed(IBlockState state, BlockPos pos)
+    {
+        ItemStack stack = this.inventory.getCurrentItem();
+        float f = (stack == null ? 1.0F : stack.getItem().getDigSpeed(stack, state));
+
         if (f > 1.0F)
         {
             int i = EnchantmentHelper.func_185293_e(this);
@@ -845,6 +877,16 @@
             this.spawnForced = tagCompund.getBoolean("SpawnForced");
         }
 
+        NBTTagList spawnlist = null;
+        spawnlist = tagCompund.getTagList("Spawns", 10);
+        for (int i = 0; i < spawnlist.tagCount(); i++)
+        {
+            NBTTagCompound spawndata = (NBTTagCompound)spawnlist.getCompoundTagAt(i);
+            int spawndim = spawndata.getInteger("Dim");
+            this.spawnChunkMap.put(spawndim, new BlockPos(spawndata.getInteger("SpawnX"), spawndata.getInteger("SpawnY"), spawndata.getInteger("SpawnZ")));
+            this.spawnForcedMap.put(spawndim, spawndata.getBoolean("SpawnForced"));
+        }
+
         this.foodStats.readNBT(tagCompund);
         this.capabilities.readCapabilitiesFromNBT(tagCompund);
 
@@ -877,6 +919,23 @@
             tagCompound.setBoolean("SpawnForced", this.spawnForced);
         }
 
+        NBTTagList spawnlist = new NBTTagList();
+        for (java.util.Map.Entry<Integer, BlockPos> entry : this.spawnChunkMap.entrySet())
+        {
+            BlockPos spawn = entry.getValue();
+            if (spawn == null) continue;
+            Boolean forced = spawnForcedMap.get(entry.getKey());
+            if (forced == null) forced = false;
+            NBTTagCompound spawndata = new NBTTagCompound();
+            spawndata.setInteger("Dim", entry.getKey());
+            spawndata.setInteger("SpawnX", spawn.getX());
+            spawndata.setInteger("SpawnY", spawn.getY());
+            spawndata.setInteger("SpawnZ", spawn.getZ());
+            spawndata.setBoolean("SpawnForced", forced);
+            spawnlist.appendTag(spawndata);
+        }
+        tagCompound.setTag("Spawns", spawnlist);
+
         this.foodStats.writeNBT(tagCompound);
         this.capabilities.writeCapabilitiesToNBT(tagCompound);
         tagCompound.setTag("EnderItems", this.theInventoryEnderChest.saveInventoryToNBT());
@@ -884,6 +943,7 @@
 
     public boolean attackEntityFrom(DamageSource source, float amount)
     {
+        if (!net.minecraftforge.common.ForgeHooks.onLivingAttack(this, source, amount)) return false;
         if (this.isEntityInvulnerable(source))
         {
             return false;
@@ -1123,6 +1183,7 @@
 
     public void attackTargetEntityWithCurrentItem(Entity targetEntity)
     {
+        if (!net.minecraftforge.common.ForgeHooks.onPlayerAttackTarget(this, targetEntity)) return;
         if (targetEntity.canAttackWithItem())
         {
             if (!targetEntity.hitByEntity(this))
@@ -1410,6 +1471,8 @@
 
     public EntityPlayer.EnumStatus trySleep(BlockPos bedLocation)
     {
+        EntityPlayer.EnumStatus ret = net.minecraftforge.event.ForgeEventFactory.onPlayerSleepInBed(this, bedLocation);
+        if (ret != null) return ret;
         if (!this.worldObj.isRemote)
         {
             if (this.isPlayerSleeping() || !this.isEntityAlive())
@@ -1514,13 +1577,14 @@
 
     public void wakeUpPlayer(boolean p_70999_1_, boolean updateWorldFlag, boolean setSpawn)
     {
+        net.minecraftforge.event.ForgeEventFactory.onPlayerWakeup(this, p_70999_1_, updateWorldFlag, setSpawn);
         this.setSize(0.6F, 1.8F);
         IBlockState iblockstate = this.worldObj.getBlockState(this.playerLocation);
 
-        if (this.playerLocation != null && iblockstate.getBlock() == Blocks.bed)
+        if (this.playerLocation != null && iblockstate.getBlock().isBed(worldObj, playerLocation, this))
         {
-            this.worldObj.setBlockState(this.playerLocation, iblockstate.withProperty(BlockBed.OCCUPIED, Boolean.valueOf(false)), 4);
-            BlockPos blockpos = BlockBed.getSafeExitLocation(this.worldObj, this.playerLocation, 0);
+            iblockstate.getBlock().setBedOccupied(worldObj, playerLocation, this, false);
+            BlockPos blockpos = iblockstate.getBlock().getBedSpawnPosition(worldObj, playerLocation, this);
 
             if (blockpos == null)
             {
@@ -1529,6 +1593,10 @@
 
             this.setPosition((double)((float)blockpos.getX() + 0.5F), (double)((float)blockpos.getY() + 0.1F), (double)((float)blockpos.getZ() + 0.5F));
         }
+        else
+        {
+            setSpawn = false;
+        }
 
         this.sleeping = false;
 
@@ -1547,14 +1615,14 @@
 
     private boolean isInBed()
     {
-        return this.worldObj.getBlockState(this.playerLocation).getBlock() == Blocks.bed;
+        return net.minecraftforge.event.ForgeEventFactory.fireSleepingLocationCheck(this, playerLocation);
     }
 
     public static BlockPos getBedSpawnLocation(World worldIn, BlockPos bedLocation, boolean forceSpawn)
     {
         Block block = worldIn.getBlockState(bedLocation).getBlock();
 
-        if (block != Blocks.bed)
+        if (!block.isBed(worldIn, bedLocation, null))
         {
             if (!forceSpawn)
             {
@@ -1618,16 +1686,24 @@
 
     public BlockPos getBedLocation()
     {
-        return this.spawnChunk;
+        return getBedLocation(this.dimension);
     }
 
+    @Deprecated // Use dimension-sensitive version.
     public boolean isSpawnForced()
     {
-        return this.spawnForced;
+        return isSpawnForced(this.dimension);
     }
 
     public void setSpawnPoint(BlockPos pos, boolean forced)
     {
+        if(net.minecraftforge.event.ForgeEventFactory.onPlayerSpawnSet(this, pos, forced)) return;
+        if (this.dimension != 0)
+        {
+            setSpawnChunk(pos, forced, this.dimension);
+            return;
+        }
+
         if (pos != null)
         {
             this.spawnChunk = pos;
@@ -1822,6 +1898,10 @@
 
             super.fall(distance, damageMultiplier);
         }
+        else
+        {
+            net.minecraftforge.event.ForgeEventFactory.onPlayerFall(this, distance, damageMultiplier);
+        }
     }
 
     protected void resetHeight()
@@ -2009,6 +2089,10 @@
             this.field_181016_an = oldPlayer.field_181016_an;
             this.field_181017_ao = oldPlayer.field_181017_ao;
             this.field_181018_ap = oldPlayer.field_181018_ap;
+            //Copy and re-init ExtendedProperties when switching dimensions.
+            this.extendedProperties = oldPlayer.extendedProperties;
+            for (net.minecraftforge.common.IExtendedEntityProperties p : this.extendedProperties.values())
+                p.init(this, this.worldObj);
         }
         else if (this.worldObj.getGameRules().getBoolean("keepInventory") || oldPlayer.isSpectator())
         {
@@ -2129,7 +2213,7 @@
 
     public float getEyeHeight()
     {
-        float f = 1.62F;
+        float f = eyeHeight;
 
         if (this.isPlayerSleeping())
         {
@@ -2340,6 +2424,136 @@
         return (float)this.getEntityAttribute(SharedMonsterAttributes.field_188792_h).getAttributeValue();
     }
 
+    /**
+     * Opens a GUI with this player, uses FML's IGuiHandler system.
+     * Allows for extension by modders.
+     *
+     * @param mod The mod trying to open a GUI
+     * @param modGuiId GUI ID
+     * @param world Current World
+     * @param x Passed directly to IGuiHandler, data meaningless Typically world X position
+     * @param y Passed directly to IGuiHandler, data meaningless Typically world Y position
+     * @param z Passed directly to IGuiHandler, data meaningless Typically world Z position
+     */
+    public void openGui(Object mod, int modGuiId, World world, int x, int y, int z)
+    {
+        net.minecraftforge.fml.common.network.internal.FMLNetworkHandler.openGui(this, mod, modGuiId, world, x, y, z);
+    }
+
+
+    /* ======================================== FORGE START =====================================*/
+    /**
+     * A dimension aware version of getBedLocation.
+     * @param dimension The dimension to get the bed spawn for
+     * @return The player specific spawn location for the dimension.  May be null.
+     */
+    public BlockPos getBedLocation(int dimension)
+    {
+        return dimension == 0 ? spawnChunk : spawnChunkMap.get(dimension);
+    }
+
+    /**
+     * A dimension aware version of isSpawnForced.
+     * Noramally isSpawnForced is used to determine if the respawn system should check for a bed or not.
+     * This just extends that to be dimension aware.
+     * @param dimension The dimension to get whether to check for a bed before spawning for
+     * @return The player specific spawn location for the dimension.  May be null.
+     */
+    public boolean isSpawnForced(int dimension)
+    {
+        if (dimension == 0) return this.spawnForced;
+        Boolean forced = this.spawnForcedMap.get(dimension);
+        return forced == null ? false : forced;
+    }
+
+    /**
+     * A dimension aware version of setSpawnChunk.
+     * This functions identically, but allows you to specify which dimension to affect, rather than affecting the player's current dimension.
+     * @param pos The spawn point to set as the player-specific spawn point for the dimension
+     * @param forced Whether or not the respawn code should check for a bed at this location (true means it won't check for a bed)
+     * @param dimension Which dimension to apply the player-specific respawn point to
+     */
+    public void setSpawnChunk(BlockPos pos, boolean forced, int dimension)
+    {
+        if (dimension == 0)
+        {
+            if (pos != null)
+            {
+                spawnChunk = pos;
+                spawnForced = forced;
+            }
+            else
+            {
+                spawnChunk = null;
+                spawnForced = false;
+            }
+            return;
+        }
+
+        if (pos != null)
+        {
+            spawnChunkMap.put(dimension, pos);
+            spawnForcedMap.put(dimension, forced);
+        }
+        else
+        {
+            spawnChunkMap.remove(dimension);
+            spawnForcedMap.remove(dimension);
+        }
+    }
+
+    private String displayname;
+
+    /**
+     * Returns the default eye height of the player
+     * @return player default eye height
+     */
+    public float getDefaultEyeHeight()
+    {
+        return 1.62F;
+    }
+
+    /**
+     * Get the currently computed display name, cached for efficiency.
+     * @return the current display name
+     */
+    public String getDisplayNameString()
+    {
+        if(this.displayname == null)
+        {
+            this.displayname = net.minecraftforge.event.ForgeEventFactory.getPlayerDisplayName(this, this.getName());
+        }
+        return this.displayname;
+    }
+
+    /**
+     * Force the displayed name to refresh
+     */
+    public void refreshDisplayName()
+    {
+        this.displayname = net.minecraftforge.event.ForgeEventFactory.getPlayerDisplayName(this, this.getName());
+    }
+
+    private final java.util.Collection<net.minecraft.util.IChatComponent> prefixes = new java.util.LinkedList<net.minecraft.util.IChatComponent>();
+    private final java.util.Collection<net.minecraft.util.IChatComponent> suffixes = new java.util.LinkedList<net.minecraft.util.IChatComponent>();
+
+    /**
+     * Add a prefix to the player's username in chat
+     * @param prefix The prefix
+     */
+    public void addPrefix(net.minecraft.util.IChatComponent prefix) { prefixes.add(prefix); }
+
+    /**
+     * Add a suffix to the player's username in chat
+     * @param suffix The suffix
+     */
+    public void addSuffix(net.minecraft.util.IChatComponent suffix) { suffixes.add(suffix); }
+
+    public java.util.Collection<net.minecraft.util.IChatComponent> getPrefixes() { return this.prefixes; }
+    public java.util.Collection<net.minecraft.util.IChatComponent> getSuffixes() { return this.suffixes; }
+
+    /* ======================================== FORGE END  =====================================*/
+
     public static enum EnumChatVisibility
     {
         FULL(0, "options.chat.visibility.full"),
