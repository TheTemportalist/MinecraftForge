--- ../src-base/minecraft/net/minecraft/item/Item.java
+++ ../src-work/minecraft/net/minecraft/item/Item.java
@@ -104,6 +104,9 @@
     private Item containerItem;
     private String unlocalizedName;
 
+    public final net.minecraftforge.fml.common.registry.RegistryDelegate<Item> delegate =
+            ((net.minecraftforge.fml.common.registry.FMLControlledNamespacedRegistry)itemRegistry).getDelegate(this, Item.class);
+
     public static int getIdFromItem(Item itemIn)
     {
         return itemIn == null ? 0 : itemRegistry.getIDForObject(itemIn);
@@ -192,6 +195,7 @@
         return stack;
     }
 
+    @Deprecated // Use ItemStack sensitive version below.
     public int getItemStackLimit()
     {
         return this.maxStackSize;
@@ -312,6 +316,7 @@
         return this.containerItem;
     }
 
+    @Deprecated // Use ItemStack sensitive version below.
     public boolean hasContainerItem()
     {
         return this.containerItem != null;
@@ -367,7 +372,7 @@
 
     public boolean isItemTool(ItemStack stack)
     {
-        return this.getItemStackLimit() == 1 && this.isDamageable();
+        return this.getItemStackLimit(stack) == 1 && this.isDamageable();
     }
 
     protected RayTraceResult getMovingObjectPositionFromPlayer(World worldIn, EntityPlayer playerIn, boolean useLiquids)
@@ -935,6 +940,10 @@
         private final float damageVsEntity;
         private final int enchantability;
 
+        //Added by forge for custom Tool materials.
+        @Deprecated public Item customCraftingMaterial = null; // Remote in 1.8.1
+        private ItemStack repairMaterial = null;
+
         private ToolMaterial(int harvestLevel, int maxUses, float efficiency, float damageVsEntity, int enchantability)
         {
             this.harvestLevel = harvestLevel;
