--- ../src-base/minecraft/net/minecraft/client/gui/FontRenderer.java
+++ ../src-work/minecraft/net/minecraft/client/gui/FontRenderer.java
@@ -57,7 +57,7 @@
         this.locationFontTexture = location;
         this.renderEngine = textureManagerIn;
         this.unicodeFlag = unicode;
-        textureManagerIn.bindTexture(this.locationFontTexture);
+        bindTexture(this.locationFontTexture);
 
         for (int i = 0; i < 32; ++i)
         {
@@ -97,6 +97,7 @@
     public void onResourceManagerReload(IResourceManager resourceManager)
     {
         this.readFontTexture();
+        this.readGlyphSizes();
     }
 
     private void readFontTexture()
@@ -105,7 +106,7 @@
 
         try
         {
-            bufferedimage = TextureUtil.readBufferedImage(Minecraft.getMinecraft().getResourceManager().getResource(this.locationFontTexture).getInputStream());
+            bufferedimage = TextureUtil.readBufferedImage(getResourceInputStream(this.locationFontTexture));
         }
         catch (IOException ioexception)
         {
@@ -165,7 +166,7 @@
 
         try
         {
-            inputstream = Minecraft.getMinecraft().getResourceManager().getResource(new ResourceLocation("font/glyph_sizes.bin")).getInputStream();
+            inputstream = getResourceInputStream(new ResourceLocation("font/glyph_sizes.bin"));
             inputstream.read(this.glyphWidth);
         }
         catch (IOException ioexception)
@@ -196,7 +197,7 @@
         int i = ch % 16 * 8;
         int j = ch / 16 * 8;
         int k = italic ? 1 : 0;
-        this.renderEngine.bindTexture(this.locationFontTexture);
+        bindTexture(this.locationFontTexture);
         int l = this.charWidth[ch];
         float f = (float)l - 0.01F;
         GL11.glBegin(GL11.GL_TRIANGLE_STRIP);
@@ -224,7 +225,7 @@
 
     private void loadGlyphTexture(int page)
     {
-        this.renderEngine.bindTexture(this.getUnicodePageLocation(page));
+        bindTexture(this.getUnicodePageLocation(page));
     }
 
     protected float renderUnicodeChar(char ch, boolean italic)
@@ -271,7 +272,7 @@
 
     public int drawString(String text, float x, float y, int color, boolean dropShadow)
     {
-        GlStateManager.enableAlpha();
+        enableAlpha();
         this.resetStyles();
         int i;
 
@@ -341,7 +342,7 @@
 
                     int j1 = this.colorCode[i1];
                     this.textColor = j1;
-                    GlStateManager.color((float)(j1 >> 16) / 255.0F, (float)(j1 >> 8 & 255) / 255.0F, (float)(j1 & 255) / 255.0F, this.alpha);
+                    setColor((float)(j1 >> 16) / 255.0F, (float)(j1 >> 8 & 255) / 255.0F, (float)(j1 & 255) / 255.0F, this.alpha);
                 }
                 else if (i1 == 16)
                 {
@@ -370,7 +371,7 @@
                     this.strikethroughStyle = false;
                     this.underlineStyle = false;
                     this.italicStyle = false;
-                    GlStateManager.color(this.red, this.blue, this.green, this.alpha);
+                    setColor(this.red, this.blue, this.green, this.alpha);
                 }
 
                 ++i;
@@ -398,7 +399,7 @@
                     c0 = c1;
                 }
 
-                float f1 = this.unicodeFlag ? 0.5F : 1.0F;
+                float f1 = j == -1 || this.unicodeFlag ? 0.5f : 1f;
                 boolean flag = (c0 == 0 || j == -1 || this.unicodeFlag) && shadow;
 
                 if (flag)
@@ -436,7 +437,16 @@
 
                     ++f;
                 }
+                doDraw(f);
+            }
+        }
+    }
 
+    protected void doDraw(float f)
+    {
+        {
+            {
+
                 if (this.strikethroughStyle)
                 {
                     Tessellator tessellator = Tessellator.getInstance();
@@ -509,7 +519,7 @@
             this.blue = (float)(color >> 8 & 255) / 255.0F;
             this.green = (float)(color & 255) / 255.0F;
             this.alpha = (float)(color >> 24 & 255) / 255.0F;
-            GlStateManager.color(this.red, this.blue, this.green, this.alpha);
+            setColor(this.red, this.blue, this.green, this.alpha);
             this.posX = x;
             this.posY = y;
             this.renderStringAtPos(text, dropShadow);
@@ -588,11 +598,6 @@
                 int j = this.glyphWidth[character] >>> 4;
                 int k = this.glyphWidth[character] & 15;
 
-                if (k > 7)
-                {
-                    k = 15;
-                    j = 0;
-                }
 
                 ++k;
                 return (k - j) / 2 + 1;
@@ -846,6 +851,26 @@
         return this.bidiFlag;
     }
 
+    protected void setColor(float r, float g, float b, float a)
+    {
+        GlStateManager.color(r,g,b,a);
+    }
+
+    protected void enableAlpha()
+    {
+        GlStateManager.enableAlpha();
+    }
+
+    protected void bindTexture(ResourceLocation location)
+    {
+        renderEngine.bindTexture(location);
+    }
+
+    protected InputStream getResourceInputStream(ResourceLocation location) throws IOException
+    {
+        return Minecraft.getMinecraft().getResourceManager().getResource(location).getInputStream();
+    }
+
     public int getColorCode(char character)
     {
         return this.colorCode["0123456789abcdef".indexOf(character)];
