--- ../src-base/minecraft/net/minecraft/client/renderer/texture/TextureMap.java
+++ ../src-work/minecraft/net/minecraft/client/renderer/texture/TextureMap.java
@@ -28,6 +28,7 @@
 @SideOnly(Side.CLIENT)
 public class TextureMap extends AbstractTexture implements ITickableTextureObject
 {
+    private static final boolean ENABLE_SKIP = Boolean.parseBoolean(System.getProperty("fml.skipFirstTextureLoad", "true"));
     private static final Logger logger = LogManager.getLogger();
     public static final ResourceLocation LOCATION_MISSING_TEXTURE = new ResourceLocation("missingno");
     public static final ResourceLocation locationBlocksTexture = new ResourceLocation("textures/atlas/blocks.png");
@@ -38,6 +39,7 @@
     private final IIconCreator iconCreator;
     private int mipmapLevels;
     private final TextureAtlasSprite missingImage;
+    private boolean skipFirst = false;
 
     public TextureMap(String p_i46099_1_)
     {
@@ -46,12 +48,23 @@
 
     public TextureMap(String p_i46100_1_, IIconCreator iconCreatorIn)
     {
+        this(p_i46100_1_, iconCreatorIn, false);
+    }
+
+    public TextureMap(String p_i46100_1_, boolean skipFirst)
+    {
+        this(p_i46100_1_, null, skipFirst);
+    }
+
+    public TextureMap(String p_i46100_1_, IIconCreator iconCreatorIn, boolean skipFirst)
+    {
         this.listAnimatedSprites = Lists.<TextureAtlasSprite>newArrayList();
         this.mapRegisteredSprites = Maps.<String, TextureAtlasSprite>newHashMap();
         this.mapUploadedSprites = Maps.<String, TextureAtlasSprite>newHashMap();
         this.missingImage = new TextureAtlasSprite("missingno");
         this.basePath = p_i46100_1_;
         this.iconCreator = iconCreatorIn;
+        this.skipFirst = skipFirst && ENABLE_SKIP;
     }
 
     private void initMissingImage()
@@ -90,12 +103,28 @@
         int j = Integer.MAX_VALUE;
         int k = 1 << this.mipmapLevels;
 
+        net.minecraftforge.client.ForgeHooksClient.onTextureStitchedPre(this);
+        net.minecraftforge.fml.common.FMLLog.info("Max texture size: %d", i);
+        net.minecraftforge.fml.common.ProgressManager.ProgressBar bar = net.minecraftforge.fml.common.ProgressManager.push("Texture stitching", skipFirst ? 0 : this.mapRegisteredSprites.size());
+
+        if(!skipFirst)
         for (Entry<String, TextureAtlasSprite> entry : this.mapRegisteredSprites.entrySet())
         {
             TextureAtlasSprite textureatlassprite = (TextureAtlasSprite)entry.getValue();
             ResourceLocation resourcelocation = new ResourceLocation(textureatlassprite.getIconName());
             ResourceLocation resourcelocation1 = this.completeResourceLocation(resourcelocation, 0);
+            bar.step(resourcelocation1.getResourcePath());
 
+            if (textureatlassprite.hasCustomLoader(resourceManager, resourcelocation))
+            {
+                if (!textureatlassprite.load(resourceManager, resourcelocation))
+                {
+                    j = Math.min(j, Math.min(textureatlassprite.getIconWidth(), textureatlassprite.getIconHeight()));
+                    stitcher.addSprite(textureatlassprite);
+                }
+                continue;
+            }
+
             try
             {
                 IResource iresource = resourceManager.getResource(resourcelocation1);
@@ -145,12 +174,14 @@
             }
             catch (RuntimeException runtimeexception)
             {
-                logger.error((String)("Unable to parse metadata from " + resourcelocation1), (Throwable)runtimeexception);
+                //logger.error((String)("Unable to parse metadata from " + resourcelocation1), (Throwable)runtimeexception);
+                net.minecraftforge.fml.client.FMLClientHandler.instance().trackBrokenTexture(resourcelocation1, runtimeexception.getMessage());
                 continue;
             }
             catch (IOException ioexception1)
             {
-                logger.error((String)("Using missing texture, unable to load " + resourcelocation1), (Throwable)ioexception1);
+                //logger.error((String)("Using missing texture, unable to load " + resourcelocation1), (Throwable)ioexception1);
+                net.minecraftforge.fml.client.FMLClientHandler.instance().trackMissingTexture(resourcelocation1);
                 continue;
             }
 
@@ -166,6 +197,7 @@
             stitcher.addSprite(textureatlassprite);
         }
 
+        net.minecraftforge.fml.common.ProgressManager.pop(bar);
         int j1 = Math.min(j, k);
         int k1 = MathHelper.calculateLogBaseTwo(j1);
 
@@ -175,8 +207,11 @@
             this.mipmapLevels = k1;
         }
 
+        bar = net.minecraftforge.fml.common.ProgressManager.push("Mipmap generation", skipFirst ? 0 : this.mapRegisteredSprites.size());
         for (final TextureAtlasSprite textureatlassprite1 : this.mapRegisteredSprites.values())
         {
+            if (skipFirst) break;
+            bar.step(textureatlassprite1.getIconName());
             try
             {
                 textureatlassprite1.generateMipmaps(this.mipmapLevels);
@@ -213,9 +248,13 @@
 
         this.missingImage.generateMipmaps(this.mipmapLevels);
         stitcher.addSprite(this.missingImage);
+        net.minecraftforge.fml.common.ProgressManager.pop(bar);
+        skipFirst = false;
+        bar = net.minecraftforge.fml.common.ProgressManager.push("Texture creation", 3);
 
         try
         {
+            bar.step("Stitching");
             stitcher.doStitch();
         }
         catch (StitcherException stitcherexception)
@@ -224,9 +263,11 @@
         }
 
         logger.info("Created: {}x{} {}-atlas", new Object[] {Integer.valueOf(stitcher.getCurrentWidth()), Integer.valueOf(stitcher.getCurrentHeight()), this.basePath});
+        bar.step("Allocating GL texture");
         TextureUtil.allocateTextureImpl(this.getGlTextureId(), this.mipmapLevels, stitcher.getCurrentWidth(), stitcher.getCurrentHeight());
         Map<String, TextureAtlasSprite> map = Maps.<String, TextureAtlasSprite>newHashMap(this.mapRegisteredSprites);
 
+        bar.step("Uploading GL texture");
         for (TextureAtlasSprite textureatlassprite2 : stitcher.getStichSlots())
         {
             String s = textureatlassprite2.getIconName();
@@ -256,6 +297,13 @@
         {
             textureatlassprite3.copyFrom(this.missingImage);
         }
+
+        net.minecraftforge.client.ForgeHooksClient.onTextureStitchedPost(this);
+
+        // TextureUtil.saveGlTexture is gone, FIXME
+        //if (!net.minecraftforge.common.ForgeModContainer.disableStitchedFileSaving)
+        //TextureUtil.saveGlTexture(this.basePath.replaceAll("/", "_"), this.getGlTextureId(), this.mipmapLevels, stitcher.getCurrentWidth(), stitcher.getCurrentHeight());
+        net.minecraftforge.fml.common.ProgressManager.pop(bar);
     }
 
     private ResourceLocation completeResourceLocation(ResourceLocation location, int p_147634_2_)
@@ -319,4 +367,37 @@
     {
         return this.missingImage;
     }
+
+    //===================================================================================================
+    //                                           Forge Start
+    //===================================================================================================
+    /**
+     * Grabs the registered entry for the specified name, returning null if there was not a entry.
+     * Opposed to registerIcon, this will not instantiate the entry, useful to test if a mapping exists.
+     *
+     * @param name The name of the entry to find
+     * @return The registered entry, null if nothing was registered.
+     */
+    public TextureAtlasSprite getTextureExtry(String name)
+    {
+        return (TextureAtlasSprite)mapRegisteredSprites.get(name);
+    }
+
+    /**
+     * Adds a texture registry entry to this map for the specified name if one does not already exist.
+     * Returns false if the map already contains a entry for the specified name.
+     *
+     * @param name Entry name
+     * @param entry Entry instance
+     * @return True if the entry was added to the map, false otherwise.
+     */
+    public boolean setTextureEntry(String name, TextureAtlasSprite entry)
+    {
+        if (!mapRegisteredSprites.containsKey(name))
+        {
+            mapRegisteredSprites.put(name, entry);
+            return true;
+        }
+        return false;
+    }
 }
