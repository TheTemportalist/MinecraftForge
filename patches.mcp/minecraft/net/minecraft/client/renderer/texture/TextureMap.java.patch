--- ../src-base/minecraft/net/minecraft/client/renderer/texture/TextureMap.java
+++ ../src-work/minecraft/net/minecraft/client/renderer/texture/TextureMap.java
@@ -26,6 +26,7 @@
 @SideOnly(Side.CLIENT)
 public class TextureMap extends AbstractTexture implements ITickableTextureObject
 {
+    private static final boolean ENABLE_SKIP = Boolean.parseBoolean(System.getProperty("fml.skipFirstTextureLoad", "true"));
     private static final Logger logger = LogManager.getLogger();
     public static final ResourceLocation LOCATION_MISSING_TEXTURE = new ResourceLocation("missingno");
     public static final ResourceLocation locationBlocksTexture = new ResourceLocation("textures/atlas/blocks.png");
@@ -36,6 +37,7 @@
     private final IIconCreator iconCreator;
     private int mipmapLevels;
     private final TextureAtlasSprite missingImage;
+    private boolean skipFirst = false;
 
     public TextureMap(String p_i46099_1_)
     {
@@ -44,12 +46,23 @@
 
     public TextureMap(String p_i46100_1_, IIconCreator iconCreatorIn)
     {
+        this(p_i46100_1_, iconCreatorIn, false);
+    }
+
+    public TextureMap(String p_i46100_1_, boolean skipFirst)
+    {
+        this(p_i46100_1_, null, skipFirst);
+    }
+
+    public TextureMap(String p_i46100_1_, IIconCreator iconCreatorIn, boolean skipFirst)
+    {
         this.listAnimatedSprites = Lists.<TextureAtlasSprite>newArrayList();
         this.mapRegisteredSprites = Maps.<String, TextureAtlasSprite>newHashMap();
         this.mapUploadedSprites = Maps.<String, TextureAtlasSprite>newHashMap();
         this.missingImage = new TextureAtlasSprite("missingno");
         this.basePath = p_i46100_1_;
         this.iconCreator = iconCreatorIn;
+        this.skipFirst = skipFirst && ENABLE_SKIP;
     }
 
     private void initMissingImage()
@@ -139,9 +152,13 @@
 
         this.missingImage.generateMipmaps(this.mipmapLevels);
         stitcher.addSprite(this.missingImage);
+        net.minecraftforge.fml.common.ProgressManager.pop(bar);
+        skipFirst = false;
+        bar = net.minecraftforge.fml.common.ProgressManager.push("Texture creation", 3);
 
         try
         {
+            bar.step("Stitching");
             stitcher.doStitch();
         }
         catch (StitcherException stitcherexception)
@@ -253,6 +270,13 @@
             crashreportcategory.addCrashSection("Mipmap levels", Integer.valueOf(this.mipmapLevels));
             throw new ReportedException(crashreport);
         }
+
+        net.minecraftforge.client.ForgeHooksClient.onTextureStitchedPost(this);
+
+        // TextureUtil.saveGlTexture is gone, FIXME
+        //if (!net.minecraftforge.common.ForgeModContainer.disableStitchedFileSaving)
+        //TextureUtil.saveGlTexture(this.basePath.replaceAll("/", "_"), this.getGlTextureId(), this.mipmapLevels, stitcher.getCurrentWidth(), stitcher.getCurrentHeight());
+        net.minecraftforge.fml.common.ProgressManager.pop(bar);
     }
 
     private ResourceLocation func_184396_a(TextureAtlasSprite p_184396_1_)
@@ -317,4 +341,37 @@
     {
         return this.missingImage;
     }
+
+    //===================================================================================================
+    //                                           Forge Start
+    //===================================================================================================
+    /**
+     * Grabs the registered entry for the specified name, returning null if there was not a entry.
+     * Opposed to registerIcon, this will not instantiate the entry, useful to test if a mapping exists.
+     *
+     * @param name The name of the entry to find
+     * @return The registered entry, null if nothing was registered.
+     */
+    public TextureAtlasSprite getTextureExtry(String name)
+    {
+        return (TextureAtlasSprite)mapRegisteredSprites.get(name);
+    }
+
+    /**
+     * Adds a texture registry entry to this map for the specified name if one does not already exist.
+     * Returns false if the map already contains a entry for the specified name.
+     *
+     * @param name Entry name
+     * @param entry Entry instance
+     * @return True if the entry was added to the map, false otherwise.
+     */
+    public boolean setTextureEntry(String name, TextureAtlasSprite entry)
+    {
+        if (!mapRegisteredSprites.containsKey(name))
+        {
+            mapRegisteredSprites.put(name, entry);
+            return true;
+        }
+        return false;
+    }
 }
