--- ../src-base/minecraft/net/minecraft/client/Minecraft.java
+++ ../src-work/minecraft/net/minecraft/client/Minecraft.java
@@ -318,7 +318,6 @@
         this.sessionService = (new YggdrasilAuthenticationService(this.proxy, UUID.randomUUID().toString())).createMinecraftSessionService();
         this.session = gameConfig.userInfo.session;
         logger.info("Setting user: " + this.session.getUsername());
-        logger.info("(Session ID is " + this.session.getSessionID() + ")");
         this.isDemo = gameConfig.gameInfo.isDemo;
         this.displayWidth = gameConfig.displayInfo.width > 0 ? gameConfig.displayInfo.width : 1;
         this.displayHeight = gameConfig.displayInfo.height > 0 ? gameConfig.displayInfo.height : 1;
@@ -432,10 +431,10 @@
         this.mcResourceManager = new SimpleReloadableResourceManager(this.metadataSerializer_);
         this.mcLanguageManager = new LanguageManager(this.metadataSerializer_, this.gameSettings.language);
         this.mcResourceManager.registerReloadListener(this.mcLanguageManager);
-        this.refreshResources();
+        net.minecraftforge.fml.client.FMLClientHandler.instance().beginMinecraftLoading(this, this.defaultResourcePacks, this.mcResourceManager);
         this.renderEngine = new TextureManager(this.mcResourceManager);
         this.mcResourceManager.registerReloadListener(this.renderEngine);
-        this.drawSplashScreen(this.renderEngine);
+        net.minecraftforge.fml.client.SplashProgress.drawVanillaScreen(this.renderEngine);
         this.skinManager = new SkinManager(this.renderEngine, new File(this.fileAssets, "skins"), this.sessionService);
         this.saveLoader = new AnvilSaveConverter(new File(this.mcDataDir, "saves"), this.field_184131_U);
         this.mcSoundHandler = new SoundHandler(this.mcResourceManager, this.gameSettings);
@@ -469,6 +468,8 @@
             }
         });
         this.mouseHelper = new MouseHelper();
+        net.minecraftforge.fml.common.ProgressManager.ProgressBar bar= net.minecraftforge.fml.common.ProgressManager.push("Rendering Setup", 5, true);
+        bar.step("GL Setup");
         this.checkGLError("Pre startup");
         GlStateManager.enableTexture2D();
         GlStateManager.shadeModel(7425);
@@ -482,19 +483,23 @@
         GlStateManager.loadIdentity();
         GlStateManager.matrixMode(5888);
         this.checkGLError("Startup");
-        this.textureMapBlocks = new TextureMap("textures");
+        bar.step("Loading Texture Map");
+        this.textureMapBlocks = new TextureMap("textures", true);
         this.textureMapBlocks.setMipmapLevels(this.gameSettings.mipmapLevels);
         this.renderEngine.loadTickableTexture(TextureMap.locationBlocksTexture, this.textureMapBlocks);
         this.renderEngine.bindTexture(TextureMap.locationBlocksTexture);
         this.textureMapBlocks.setBlurMipmapDirect(false, this.gameSettings.mipmapLevels > 0);
+        bar.step("Loading Model Manager");
         this.modelManager = new ModelManager(this.textureMapBlocks);
         this.mcResourceManager.registerReloadListener(this.modelManager);
         this.field_184127_aH = BlockColors.func_186723_a();
         this.field_184128_aI = ItemColors.func_186729_a(this.field_184127_aH);
+        bar.step("Loading Item Renderer");
         this.renderItem = new RenderItem(this.renderEngine, this.modelManager, this.field_184128_aI);
         this.renderManager = new RenderManager(this.renderEngine, this.renderItem);
         this.itemRenderer = new ItemRenderer(this);
         this.mcResourceManager.registerReloadListener(this.renderItem);
+        bar.step("Loading Entity Renderer");
         this.entityRenderer = new EntityRenderer(this, this.mcResourceManager);
         this.mcResourceManager.registerReloadListener(this.entityRenderer);
         this.blockRenderDispatcher = new BlockRendererDispatcher(this.modelManager.getBlockModelShapes(), this.field_184127_aH);
@@ -504,23 +509,26 @@
         this.guiAchievement = new GuiAchievement(this);
         GlStateManager.viewport(0, 0, this.displayWidth, this.displayHeight);
         this.effectRenderer = new EffectRenderer(this.theWorld, this.renderEngine);
+        net.minecraftforge.fml.common.ProgressManager.pop(bar);
+        net.minecraftforge.fml.client.FMLClientHandler.instance().finishMinecraftLoading();
         this.checkGLError("Post startup");
-        this.ingameGUI = new GuiIngame(this);
+        this.ingameGUI = new net.minecraftforge.client.GuiIngameForge(this);
 
         if (this.serverName != null)
         {
-            this.displayGuiScreen(new GuiConnecting(new GuiMainMenu(), this, this.serverName, this.serverPort));
+            net.minecraftforge.fml.client.FMLClientHandler.instance().connectToServerAtStartup(this.serverName, this.serverPort);
         }
         else
         {
             this.displayGuiScreen(new GuiMainMenu());
         }
 
-        this.renderEngine.deleteTexture(this.mojangLogo);
+        net.minecraftforge.fml.client.SplashProgress.clearVanillaResources(renderEngine, mojangLogo);
         this.mojangLogo = null;
         this.loadingScreen = new LoadingScreenRenderer(this);
         this.field_184132_p = new DebugRenderer(this);
 
+        net.minecraftforge.fml.client.FMLClientHandler.instance().onInitializationComplete();
         if (this.gameSettings.fullScreen && !this.fullscreen)
         {
             this.toggleFullscreen();
@@ -692,21 +700,23 @@
         File file2 = new File(file1, "crash-" + (new SimpleDateFormat("yyyy-MM-dd_HH.mm.ss")).format(new Date()) + "-client.txt");
         Bootstrap.printToSYSOUT(crashReportIn.getCompleteReport());
 
+        int retVal;
         if (crashReportIn.getFile() != null)
         {
             Bootstrap.printToSYSOUT("#@!@# Game crashed! Crash report saved to: #@!@# " + crashReportIn.getFile());
-            System.exit(-1);
+            retVal = -1;
         }
         else if (crashReportIn.saveToFile(file2))
         {
             Bootstrap.printToSYSOUT("#@!@# Game crashed! Crash report saved to: #@!@# " + file2.getAbsolutePath());
-            System.exit(-1);
+            retVal = -1;
         }
         else
         {
             Bootstrap.printToSYSOUT("#@?@# Game crashed! Crash report could not be saved. #@?@#");
-            System.exit(-2);
+            retVal = -2;
         }
+        net.minecraftforge.fml.common.FMLCommonHandler.instance().handleExit(retVal);
     }
 
     public boolean isUnicode()
@@ -899,11 +909,6 @@
 
     public void displayGuiScreen(GuiScreen guiScreenIn)
     {
-        if (this.currentScreen != null)
-        {
-            this.currentScreen.onGuiClosed();
-        }
-
         if (guiScreenIn == null && this.theWorld == null)
         {
             guiScreenIn = new GuiMainMenu();
@@ -913,6 +918,17 @@
             guiScreenIn = new GuiGameOver((ITextComponent)null);
         }
 
+        GuiScreen old = this.currentScreen;
+        net.minecraftforge.client.event.GuiOpenEvent event = new net.minecraftforge.client.event.GuiOpenEvent(guiScreenIn);
+
+        if (net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(event)) return;
+
+        guiScreenIn = event.gui;
+        if (old != null && guiScreenIn != old)
+        {
+            old.onGuiClosed();
+        }
+
         if (guiScreenIn instanceof GuiMainMenu || guiScreenIn instanceof GuiMultiplayer)
         {
             this.gameSettings.showDebugInfo = false;
@@ -1051,9 +1067,11 @@
 
         if (!this.skipRenderWorld)
         {
+            net.minecraftforge.fml.common.FMLCommonHandler.instance().onRenderTickStart(this.timer.renderPartialTicks);
             this.mcProfiler.endStartSection("gameRenderer");
             this.entityRenderer.updateCameraAndRender(this.timer.renderPartialTicks, i);
             this.mcProfiler.endSection();
+            net.minecraftforge.fml.common.FMLCommonHandler.instance().onRenderTickEnd(this.timer.renderPartialTicks);
         }
 
         this.mcProfiler.endSection();
@@ -1393,9 +1411,9 @@
             {
                 BlockPos blockpos = this.objectMouseOver.getBlockPos();
 
-                if (this.theWorld.getBlockState(blockpos).func_185904_a() != Material.air && this.playerController.onPlayerDamageBlock(blockpos, this.objectMouseOver.sideHit))
+                if (!this.theWorld.isAirBlock(blockpos) && this.playerController.onPlayerDamageBlock(blockpos, this.objectMouseOver.sideHit))
                 {
-                    this.effectRenderer.addBlockHitEffects(blockpos, this.objectMouseOver.sideHit);
+                    this.effectRenderer.addBlockHitEffects(blockpos, this.objectMouseOver);
                     this.thePlayer.func_184609_a(EnumHand.MAIN_HAND);
                 }
             }
@@ -1429,7 +1447,7 @@
                     case BLOCK:
                         BlockPos blockpos = this.objectMouseOver.getBlockPos();
 
-                        if (this.theWorld.getBlockState(blockpos).func_185904_a() != Material.air)
+                        if (!this.theWorld.isAirBlock(blockpos))
                         {
                             this.playerController.clickBlock(blockpos, this.objectMouseOver.sideHit);
                             break;
@@ -1623,6 +1641,8 @@
             --this.rightClickDelayTimer;
         }
 
+        net.minecraftforge.fml.common.FMLCommonHandler.instance().onPreClientTick();
+
         this.mcProfiler.startSection("gui");
 
         if (!this.isGamePaused)
@@ -1734,6 +1754,7 @@
                     this.joinPlayerCounter = 0;
                     this.theWorld.joinEntityInSurroundings(this.thePlayer);
                 }
+                net.minecraftforge.fml.common.FMLCommonHandler.instance().fireMouseInput();
             }
 
             this.mcProfiler.endStartSection("gameRenderer");
@@ -1821,6 +1842,7 @@
             this.myNetworkManager.processReceivedPackets();
         }
 
+        net.minecraftforge.fml.common.FMLCommonHandler.instance().onPostClientTick();
         this.mcProfiler.endSection();
         this.systemTime = getSystemTime();
     }
@@ -1926,6 +1948,7 @@
                         this.gameSettings.showLagometer = this.gameSettings.showDebugInfo && GuiScreen.isAltKeyDown();
                     }
                 }
+                net.minecraftforge.fml.common.FMLCommonHandler.instance().fireKeyInput();
             }
         }
 
@@ -2166,6 +2189,8 @@
     {
         while (Mouse.next())
         {
+            if (net.minecraftforge.client.ForgeHooksClient.postMouseEvent()) continue;
+
             int i = Mouse.getEventButton();
             KeyBinding.setKeyBindState(i - 100, Mouse.getEventButtonState());
 
@@ -2231,6 +2256,7 @@
 
     public void launchIntegratedServer(String folderName, String worldName, WorldSettings worldSettingsIn)
     {
+        net.minecraftforge.fml.client.FMLClientHandler.instance().startIntegratedServer(folderName, worldName, worldSettingsIn);
         this.loadWorld((WorldClient)null);
         System.gc();
         ISaveHandler isavehandler = this.saveLoader.getSaveLoader(folderName, false);
@@ -2273,6 +2299,12 @@
 
         while (!this.theIntegratedServer.serverIsInRunLoop())
         {
+            if (!net.minecraftforge.fml.common.StartupQuery.check())
+            {
+                loadWorld(null);
+                displayGuiScreen(null);
+                return;
+            }
             String s = this.theIntegratedServer.getUserMessage();
 
             if (s != null)
@@ -2298,8 +2330,14 @@
         SocketAddress socketaddress = this.theIntegratedServer.getNetworkSystem().addLocalEndpoint();
         NetworkManager networkmanager = NetworkManager.provideLocalClient(socketaddress);
         networkmanager.setNetHandler(new NetHandlerLoginClient(networkmanager, this, (GuiScreen)null));
-        networkmanager.sendPacket(new C00Handshake(107, socketaddress.toString(), 0, EnumConnectionState.LOGIN));
-        networkmanager.sendPacket(new CPacketLoginStart(this.getSession().getProfile()));
+        networkmanager.sendPacket(new C00Handshake(107, socketaddress.toString(), 0, EnumConnectionState.LOGIN, true));
+        com.mojang.authlib.GameProfile gameProfile = this.getSession().getProfile();
+        if (!this.getSession().hasCachedProperties())
+        {
+            gameProfile = sessionService.fillProfileProperties(gameProfile, true); //Forge: Fill profile properties upon game load. Fixes MC-52974.
+            this.getSession().setProperties(gameProfile.getProperties());
+        }
+        networkmanager.sendPacket(new CPacketLoginStart(gameProfile));
         this.myNetworkManager = networkmanager;
     }
 
@@ -2310,6 +2348,8 @@
 
     public void loadWorld(WorldClient worldClientIn, String loadingMessage)
     {
+        if (theWorld != null) net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.world.WorldEvent.Unload(theWorld));
+
         if (worldClientIn == null)
         {
             NetHandlerPlayClient nethandlerplayclient = this.getNetHandler();
@@ -2322,6 +2362,18 @@
             if (this.theIntegratedServer != null && this.theIntegratedServer.isAnvilFileSet())
             {
                 this.theIntegratedServer.initiateShutdown();
+                if (loadingScreen != null)
+                {
+                    this.loadingScreen.displayLoadingString(I18n.format("forge.client.shutdown.internal"));
+                }
+                while (!theIntegratedServer.isServerStopped())
+                {
+                    try
+                    {
+                        Thread.sleep(10);
+                    }
+                    catch (InterruptedException ie) {}
+                }
             }
 
             this.theIntegratedServer = null;
@@ -2345,6 +2397,7 @@
             this.ingameGUI.func_181029_i();
             this.setServerData((ServerData)null);
             this.integratedServerIsRunning = false;
+            net.minecraftforge.fml.client.FMLClientHandler.instance().handleClientWorldClosing(this.theWorld);
         }
 
         this.mcSoundHandler.stopSounds();
@@ -2461,159 +2514,8 @@
     {
         if (this.objectMouseOver != null && this.objectMouseOver.typeOfHit != RayTraceResult.Type.MISS)
         {
-            boolean flag = this.thePlayer.capabilities.isCreativeMode;
-            TileEntity tileentity = null;
-            ItemStack itemstack;
-
-            if (this.objectMouseOver.typeOfHit == RayTraceResult.Type.BLOCK)
-            {
-                BlockPos blockpos = this.objectMouseOver.getBlockPos();
-                IBlockState iblockstate = this.theWorld.getBlockState(blockpos);
-                Block block = iblockstate.getBlock();
-
-                if (iblockstate.func_185904_a() == Material.air)
-                {
-                    return;
-                }
-
-                itemstack = block.func_185473_a(this.theWorld, blockpos, iblockstate);
-
-                if (itemstack == null)
-                {
-                    return;
-                }
-
-                if (flag && GuiScreen.isCtrlKeyDown() && block.hasTileEntity())
-                {
-                    tileentity = this.theWorld.getTileEntity(blockpos);
-                }
-            }
-            else
-            {
-                if (this.objectMouseOver.typeOfHit != RayTraceResult.Type.ENTITY || this.objectMouseOver.entityHit == null || !flag)
-                {
-                    return;
-                }
-
-                if (this.objectMouseOver.entityHit instanceof EntityPainting)
-                {
-                    itemstack = new ItemStack(Items.painting);
-                }
-                else if (this.objectMouseOver.entityHit instanceof EntityLeashKnot)
-                {
-                    itemstack = new ItemStack(Items.lead);
-                }
-                else if (this.objectMouseOver.entityHit instanceof EntityItemFrame)
-                {
-                    EntityItemFrame entityitemframe = (EntityItemFrame)this.objectMouseOver.entityHit;
-                    ItemStack itemstack1 = entityitemframe.getDisplayedItem();
-
-                    if (itemstack1 == null)
-                    {
-                        itemstack = new ItemStack(Items.item_frame);
-                    }
-                    else
-                    {
-                        itemstack = ItemStack.copyItemStack(itemstack1);
-                    }
-                }
-                else if (this.objectMouseOver.entityHit instanceof EntityMinecart)
-                {
-                    EntityMinecart entityminecart = (EntityMinecart)this.objectMouseOver.entityHit;
-                    Item item;
-
-                    switch (entityminecart.func_184264_v())
-                    {
-                        case FURNACE:
-                            item = Items.furnace_minecart;
-                            break;
-                        case CHEST:
-                            item = Items.chest_minecart;
-                            break;
-                        case TNT:
-                            item = Items.tnt_minecart;
-                            break;
-                        case HOPPER:
-                            item = Items.hopper_minecart;
-                            break;
-                        case COMMAND_BLOCK:
-                            item = Items.command_block_minecart;
-                            break;
-                        default:
-                            item = Items.minecart;
-                    }
-
-                    itemstack = new ItemStack(item);
-                }
-                else if (this.objectMouseOver.entityHit instanceof EntityBoat)
-                {
-                    itemstack = new ItemStack(((EntityBoat)this.objectMouseOver.entityHit).func_184455_j());
-                }
-                else if (this.objectMouseOver.entityHit instanceof EntityArmorStand)
-                {
-                    itemstack = new ItemStack(Items.armor_stand);
-                }
-                else if (this.objectMouseOver.entityHit instanceof EntityEnderCrystal)
-                {
-                    itemstack = new ItemStack(Items.field_185158_cP);
-                }
-                else
-                {
-                    String s = EntityList.getEntityString(this.objectMouseOver.entityHit);
-
-                    if (!EntityList.entityEggs.containsKey(s))
-                    {
-                        return;
-                    }
-
-                    itemstack = new ItemStack(Items.spawn_egg);
-                    ItemMonsterPlacer.func_185078_a(itemstack, s);
-                }
-            }
-
-            if (itemstack.getItem() == null)
-            {
-                String s1 = "";
-
-                if (this.objectMouseOver.typeOfHit == RayTraceResult.Type.BLOCK)
-                {
-                    s1 = ((ResourceLocation)Block.blockRegistry.getNameForObject(this.theWorld.getBlockState(this.objectMouseOver.getBlockPos()).getBlock())).toString();
-                }
-                else if (this.objectMouseOver.typeOfHit == RayTraceResult.Type.ENTITY)
-                {
-                    s1 = EntityList.getEntityString(this.objectMouseOver.entityHit);
-                }
-
-                logger.warn("Picking on: [{}] {} gave null item", new Object[] {this.objectMouseOver.typeOfHit, s1});
-            }
-            else
-            {
-                InventoryPlayer inventoryplayer = this.thePlayer.inventory;
-
-                if (tileentity != null)
-                {
-                    this.func_184119_a(itemstack, tileentity);
-                }
-
-                int i = inventoryplayer.func_184429_b(itemstack);
-
-                if (flag)
-                {
-                    inventoryplayer.func_184434_a(itemstack);
-                    this.playerController.sendSlotPacket(this.thePlayer.func_184586_b(EnumHand.MAIN_HAND), 36 + inventoryplayer.currentItem);
-                }
-                else if (i != -1)
-                {
-                    if (InventoryPlayer.func_184435_e(i))
-                    {
-                        inventoryplayer.currentItem = i;
-                    }
-                    else
-                    {
-                        this.playerController.func_187100_a(i);
-                    }
-                }
-            }
+            net.minecraftforge.common.ForgeHooks.onPickBlock(this.objectMouseOver, this.thePlayer, this.theWorld);
+            // We delete this code wholly instead of commenting it out, to make sure we detect changes in it between MC versions
         }
     }
 
@@ -2909,18 +2811,8 @@
 
     public static int getGLMaximumTextureSize()
     {
-        for (int i = 16384; i > 0; i >>= 1)
-        {
-            GlStateManager.func_187419_a(32868, 0, 6408, i, i, 0, 6408, 5121, (IntBuffer)null);
-            int j = GlStateManager.func_187411_c(32868, 0, 4096);
-
-            if (j != 0)
-            {
-                return i;
-            }
-        }
-
-        return -1;
+        //Forge we redirect this to our code which caches the value before any splash screen stuff is done.
+        return net.minecraftforge.fml.client.SplashProgress.getMaxTextureSize();
     }
 
     public boolean isSnooperEnabled()
