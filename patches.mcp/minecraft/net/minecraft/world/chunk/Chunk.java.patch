--- ../src-base/minecraft/net/minecraft/world/chunk/Chunk.java
+++ ../src-work/minecraft/net/minecraft/world/chunk/Chunk.java
@@ -167,7 +167,7 @@
                 {
                     Block block = this.getBlock0(j, l - 1, k);
 
-                    if (block.getLightOpacity() != 0)
+                    if (getBlockLightOpacity(j, l - 1, k) != 0)
                     {
                         this.heightMap[k << 4 | j] = l;
 
@@ -440,12 +440,12 @@
 
     public int getBlockLightOpacity(BlockPos pos)
     {
-        return this.getBlock(pos).getLightOpacity();
+        return this.getBlock(pos).getLightOpacity(worldObj, pos);
     }
 
     private int getBlockLightOpacity(int x, int y, int z)
     {
-        return this.getBlock0(x, y, z).getLightOpacity();
+        return getBlockLightOpacity(new BlockPos((xPosition << 4) + x, y, (zPosition << 4) + z));
     }
 
     private Block getBlock0(int x, int y, int z)
@@ -607,6 +607,7 @@
         {
             Block block = state.getBlock();
             Block block1 = iblockstate.getBlock();
+            int k1 = block1.getLightOpacity(this.worldObj, pos); // Relocate old light value lookup here, so that it is called before TE is removed.
             ExtendedBlockStorage extendedblockstorage = this.storageArrays[j >> 4];
             boolean flag = false;
 
@@ -623,14 +624,19 @@
 
             extendedblockstorage.set(i, j & 15, k, state);
 
-            if (block1 != block)
+            //if (block1 != block)
             {
                 if (!this.worldObj.isRemote)
                 {
+                    if (block1 != block) //Only fire block breaks when the block changes.
                     block1.breakBlock(this.worldObj, pos, iblockstate);
+                    TileEntity te = this.getTileEntity(pos, Chunk.EnumCreateEntityType.CHECK);
+                    if (te != null && te.shouldRefresh(this.worldObj, pos, iblockstate, state)) this.worldObj.removeTileEntity(pos);
                 }
-                else if (block1 instanceof ITileEntityProvider)
+                else if (block1.hasTileEntity(iblockstate))
                 {
+                    TileEntity te = this.getTileEntity(pos, Chunk.EnumCreateEntityType.CHECK);
+                    if (te != null && te.shouldRefresh(this.worldObj, pos, iblockstate, state))
                     this.worldObj.removeTileEntity(pos);
                 }
             }
@@ -647,8 +653,7 @@
                 }
                 else
                 {
-                    int j1 = block.getLightOpacity();
-                    int k1 = block1.getLightOpacity();
+                    int j1 = block.getLightOpacity(this.worldObj, pos);
 
                     if (j1 > 0)
                     {
@@ -668,28 +673,18 @@
                     }
                 }
 
-                if (block1 instanceof ITileEntityProvider)
-                {
-                    TileEntity tileentity = this.getTileEntity(pos, Chunk.EnumCreateEntityType.CHECK);
-
-                    if (tileentity != null)
-                    {
-                        tileentity.updateContainingBlockInfo();
-                    }
-                }
-
                 if (!this.worldObj.isRemote && block1 != block)
                 {
                     block.onBlockAdded(this.worldObj, pos, state);
                 }
 
-                if (block instanceof ITileEntityProvider)
+                if (block.hasTileEntity(state))
                 {
                     TileEntity tileentity1 = this.getTileEntity(pos, Chunk.EnumCreateEntityType.CHECK);
 
                     if (tileentity1 == null)
                     {
-                        tileentity1 = ((ITileEntityProvider)block).createNewTileEntity(this.worldObj, block.getMetaFromState(state));
+                        tileentity1 = block.createTileEntity(this.worldObj, state);
                         this.worldObj.setTileEntity(pos, tileentity1);
                     }
 
@@ -792,6 +787,7 @@
             k = this.entityLists.length - 1;
         }
 
+        net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.entity.EntityEvent.EnteringChunk(entityIn, this.xPosition, this.zPosition, entityIn.chunkCoordX, entityIn.chunkCoordZ));
         entityIn.addedToChunk = true;
         entityIn.chunkCoordX = this.xPosition;
         entityIn.chunkCoordY = k;
@@ -830,13 +826,20 @@
     private TileEntity createNewTileEntity(BlockPos pos)
     {
         Block block = this.getBlock(pos);
-        return !block.hasTileEntity() ? null : ((ITileEntityProvider)block).createNewTileEntity(this.worldObj, this.getBlockMetadata(pos));
+        IBlockState state = block.getStateFromMeta(this.getBlockMetadata(pos));
+        return !block.hasTileEntity(state) ? null : block.createTileEntity(this.worldObj, state);
     }
 
     public TileEntity getTileEntity(BlockPos pos, Chunk.EnumCreateEntityType p_177424_2_)
     {
         TileEntity tileentity = (TileEntity)this.chunkTileEntityMap.get(pos);
 
+        if (tileentity != null && tileentity.isInvalid())
+        {
+            chunkTileEntityMap.remove(pos);
+            tileentity = null;
+        }
+
         if (tileentity == null)
         {
             if (p_177424_2_ == Chunk.EnumCreateEntityType.IMMEDIATE)
@@ -846,14 +849,9 @@
             }
             else if (p_177424_2_ == Chunk.EnumCreateEntityType.QUEUED)
             {
-                this.tileEntityPosQueue.add(pos);
+                this.tileEntityPosQueue.add(pos.getImmutable());
             }
         }
-        else if (tileentity.isInvalid())
-        {
-            this.chunkTileEntityMap.remove(pos);
-            return null;
-        }
 
         return tileentity;
     }
@@ -873,7 +871,7 @@
         tileEntityIn.setWorldObj(this.worldObj);
         tileEntityIn.setPos(pos);
 
-        if (this.getBlock(pos) instanceof ITileEntityProvider)
+        if (this.getBlock(pos).hasTileEntity(getBlock(pos).getStateFromMeta(this.getBlockMetadata(pos))))
         {
             if (this.chunkTileEntityMap.containsKey(pos))
             {
@@ -882,6 +880,7 @@
 
             tileEntityIn.validate();
             this.chunkTileEntityMap.put(pos, tileEntityIn);
+            tileEntityIn.onLoad();
         }
     }
 
@@ -910,8 +909,9 @@
                 entity.onChunkLoad();
             }
 
-            this.worldObj.loadEntities(this.entityLists[i]);
+            this.worldObj.loadEntities(com.google.common.collect.ImmutableList.copyOf(this.entityLists[i]));
         }
+        net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.world.ChunkEvent.Load(this));
     }
 
     public void onChunkUnload()
@@ -927,6 +927,7 @@
         {
             this.worldObj.unloadEntities(this.entityLists[i]);
         }
+        net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.world.ChunkEvent.Unload(this));
     }
 
     public void setChunkModified()
@@ -936,8 +937,8 @@
 
     public void getEntitiesWithinAABBForEntity(Entity entityIn, AxisAlignedBB aabb, List<Entity> listToFill, Predicate <? super Entity > p_177414_4_)
     {
-        int i = MathHelper.floor_double((aabb.minY - 2.0D) / 16.0D);
-        int j = MathHelper.floor_double((aabb.maxY + 2.0D) / 16.0D);
+        int i = MathHelper.floor_double((aabb.minY - World.MAX_ENTITY_RADIUS) / 16.0D);
+        int j = MathHelper.floor_double((aabb.maxY + World.MAX_ENTITY_RADIUS) / 16.0D);
         i = MathHelper.clamp_int(i, 0, this.entityLists.length - 1);
         j = MathHelper.clamp_int(j, 0, this.entityLists.length - 1);
 
@@ -976,8 +977,8 @@
 
     public <T extends Entity> void getEntitiesOfTypeWithinAAAB(Class <? extends T > entityClass, AxisAlignedBB aabb, List<T> listToFill, Predicate <? super T > p_177430_4_)
     {
-        int i = MathHelper.floor_double((aabb.minY - 2.0D) / 16.0D);
-        int j = MathHelper.floor_double((aabb.maxY + 2.0D) / 16.0D);
+        int i = MathHelper.floor_double((aabb.minY - World.MAX_ENTITY_RADIUS) / 16.0D);
+        int j = MathHelper.floor_double((aabb.maxY + World.MAX_ENTITY_RADIUS) / 16.0D);
         i = MathHelper.clamp_int(i, 0, this.entityLists.length - 1);
         j = MathHelper.clamp_int(j, 0, this.entityLists.length - 1);
 
@@ -1137,8 +1138,10 @@
         while (!this.tileEntityPosQueue.isEmpty())
         {
             BlockPos blockpos = (BlockPos)this.tileEntityPosQueue.poll();
+            Block block = this.getBlock(blockpos);
+            IBlockState state = block.getStateFromMeta(this.getBlockMetadata(blockpos));
 
-            if (this.getTileEntity(blockpos, Chunk.EnumCreateEntityType.CHECK) == null && this.getBlock(blockpos).hasTileEntity())
+            if (this.getTileEntity(blockpos, Chunk.EnumCreateEntityType.CHECK) == null && block.hasTileEntity(state))
             {
                 TileEntity tileentity = this.createNewTileEntity(blockpos);
                 this.worldObj.setTileEntity(blockpos, tileentity);
@@ -1200,6 +1203,13 @@
     @SideOnly(Side.CLIENT)
     public void fillChunk(byte[] p_177439_1_, int p_177439_2_, boolean p_177439_3_)
     {
+        for(TileEntity tileEntity : chunkTileEntityMap.values())
+        {
+            tileEntity.updateContainingBlockInfo();
+            tileEntity.getBlockMetadata();
+            tileEntity.getBlockType();
+        }
+
         int i = 0;
         boolean flag = !this.worldObj.provider.getHasNoSky();
 
@@ -1267,10 +1277,16 @@
         this.isTerrainPopulated = true;
         this.generateHeightMap();
 
+        List<TileEntity> invalidList = new java.util.ArrayList<TileEntity>();
+
         for (TileEntity tileentity : this.chunkTileEntityMap.values())
         {
+            if (tileentity.shouldRefresh(this.worldObj, tileentity.getPos(), tileentity.getBlockType().getStateFromMeta(tileentity.getBlockMetadata()), getBlockState(tileentity.getPos())))
+                invalidList.add(tileentity);
             tileentity.updateContainingBlockInfo();
         }
+
+        for (TileEntity te : invalidList) te.invalidate();
     }
 
     public BiomeGenBase getBiome(BlockPos pos, WorldChunkManager chunkManager)
@@ -1583,4 +1599,20 @@
         QUEUED,
         CHECK;
     }
+
+    /**
+     * Removes the tile entity at the specified position, only if it's
+     * marked as invalid.
+     */
+    public void removeInvalidTileEntity(BlockPos pos)
+    {
+        if (isChunkLoaded)
+        {
+            TileEntity entity = (TileEntity)chunkTileEntityMap.get(pos);
+            if (entity != null && entity.isInvalid())
+            {
+                chunkTileEntityMap.remove(pos);
+            }
+        }
+    }
 }
