--- ../src-base/minecraft/net/minecraft/world/chunk/Chunk.java
+++ ../src-work/minecraft/net/minecraft/world/chunk/Chunk.java
@@ -534,6 +534,7 @@
         {
             Block block = state.getBlock();
             Block block1 = iblockstate.getBlock();
+            int k1 = block1.getLightOpacity(this.worldObj, pos); // Relocate old light value lookup here, so that it is called before TE is removed.
             ExtendedBlockStorage extendedblockstorage = this.storageArrays[j >> 4];
             boolean flag = false;
 
@@ -550,14 +551,19 @@
 
             extendedblockstorage.set(i, j & 15, k, state);
 
-            if (block1 != block)
+            //if (block1 != block)
             {
                 if (!this.worldObj.isRemote)
                 {
+                    if (block1 != block) //Only fire block breaks when the block changes.
                     block1.breakBlock(this.worldObj, pos, iblockstate);
+                    TileEntity te = this.getTileEntity(pos, Chunk.EnumCreateEntityType.CHECK);
+                    if (te != null && te.shouldRefresh(this.worldObj, pos, iblockstate, state)) this.worldObj.removeTileEntity(pos);
                 }
-                else if (block1 instanceof ITileEntityProvider)
+                else if (block1.hasTileEntity(iblockstate))
                 {
+                    TileEntity te = this.getTileEntity(pos, Chunk.EnumCreateEntityType.CHECK);
+                    if (te != null && te.shouldRefresh(this.worldObj, pos, iblockstate, state))
                     this.worldObj.removeTileEntity(pos);
                 }
             }
@@ -595,28 +601,18 @@
                     }
                 }
 
-                if (block1 instanceof ITileEntityProvider)
-                {
-                    TileEntity tileentity = this.getTileEntity(pos, Chunk.EnumCreateEntityType.CHECK);
-
-                    if (tileentity != null)
-                    {
-                        tileentity.updateContainingBlockInfo();
-                    }
-                }
-
                 if (!this.worldObj.isRemote && block1 != block)
                 {
                     block.onBlockAdded(this.worldObj, pos, state);
                 }
 
-                if (block instanceof ITileEntityProvider)
+                if (block.hasTileEntity(state))
                 {
                     TileEntity tileentity1 = this.getTileEntity(pos, Chunk.EnumCreateEntityType.CHECK);
 
                     if (tileentity1 == null)
                     {
-                        tileentity1 = ((ITileEntityProvider)block).createNewTileEntity(this.worldObj, block.getMetaFromState(state));
+                        tileentity1 = block.createTileEntity(this.worldObj, state);
                         this.worldObj.setTileEntity(pos, tileentity1);
                     }
 
@@ -719,6 +715,7 @@
             k = this.entityLists.length - 1;
         }
 
+        net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.entity.EntityEvent.EnteringChunk(entityIn, this.xPosition, this.zPosition, entityIn.chunkCoordX, entityIn.chunkCoordZ));
         entityIn.addedToChunk = true;
         entityIn.chunkCoordX = this.xPosition;
         entityIn.chunkCoordY = k;
@@ -774,14 +771,9 @@
             }
             else if (p_177424_2_ == Chunk.EnumCreateEntityType.QUEUED)
             {
-                this.tileEntityPosQueue.add(pos);
+                this.tileEntityPosQueue.add(pos.getImmutable());
             }
         }
-        else if (tileentity.isInvalid())
-        {
-            this.chunkTileEntityMap.remove(pos);
-            return null;
-        }
 
         return tileentity;
     }
@@ -810,6 +802,7 @@
 
             tileEntityIn.validate();
             this.chunkTileEntityMap.put(pos, tileEntityIn);
+            tileEntityIn.onLoad();
         }
     }
 
@@ -838,8 +831,9 @@
                 entity.onChunkLoad();
             }
 
-            this.worldObj.loadEntities(this.entityLists[i]);
+            this.worldObj.loadEntities(com.google.common.collect.ImmutableList.copyOf(this.entityLists[i]));
         }
+        net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.world.ChunkEvent.Load(this));
     }
 
     public void onChunkUnload()
@@ -855,6 +849,7 @@
         {
             this.worldObj.unloadEntities(this.entityLists[i]);
         }
+        net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.world.ChunkEvent.Unload(this));
     }
 
     public void setChunkModified()
@@ -864,8 +859,8 @@
 
     public void getEntitiesWithinAABBForEntity(Entity entityIn, AxisAlignedBB aabb, List<Entity> listToFill, Predicate <? super Entity > p_177414_4_)
     {
-        int i = MathHelper.floor_double((aabb.minY - 2.0D) / 16.0D);
-        int j = MathHelper.floor_double((aabb.maxY + 2.0D) / 16.0D);
+        int i = MathHelper.floor_double((aabb.minY - World.MAX_ENTITY_RADIUS) / 16.0D);
+        int j = MathHelper.floor_double((aabb.maxY + World.MAX_ENTITY_RADIUS) / 16.0D);
         i = MathHelper.clamp_int(i, 0, this.entityLists.length - 1);
         j = MathHelper.clamp_int(j, 0, this.entityLists.length - 1);
 
@@ -904,8 +899,8 @@
 
     public <T extends Entity> void getEntitiesOfTypeWithinAAAB(Class <? extends T > entityClass, AxisAlignedBB aabb, List<T> listToFill, Predicate <? super T > p_177430_4_)
     {
-        int i = MathHelper.floor_double((aabb.minY - 2.0D) / 16.0D);
-        int j = MathHelper.floor_double((aabb.maxY + 2.0D) / 16.0D);
+        int i = MathHelper.floor_double((aabb.minY - World.MAX_ENTITY_RADIUS) / 16.0D);
+        int j = MathHelper.floor_double((aabb.maxY + World.MAX_ENTITY_RADIUS) / 16.0D);
         i = MathHelper.clamp_int(i, 0, this.entityLists.length - 1);
         j = MathHelper.clamp_int(j, 0, this.entityLists.length - 1);
 
@@ -1162,10 +1157,16 @@
         this.isTerrainPopulated = true;
         this.generateHeightMap();
 
+        List<TileEntity> invalidList = new java.util.ArrayList<TileEntity>();
+
         for (TileEntity tileentity : this.chunkTileEntityMap.values())
         {
+            if (tileentity.shouldRefresh(this.worldObj, tileentity.getPos(), tileentity.getBlockType().getStateFromMeta(tileentity.getBlockMetadata()), getBlockState(tileentity.getPos())))
+                invalidList.add(tileentity);
             tileentity.updateContainingBlockInfo();
         }
+
+        for (TileEntity te : invalidList) te.invalidate();
     }
 
     public BiomeGenBase getBiome(BlockPos pos, BiomeProvider chunkManager)
@@ -1481,4 +1482,20 @@
         QUEUED,
         CHECK;
     }
+
+    /**
+     * Removes the tile entity at the specified position, only if it's
+     * marked as invalid.
+     */
+    public void removeInvalidTileEntity(BlockPos pos)
+    {
+        if (isChunkLoaded)
+        {
+            TileEntity entity = (TileEntity)chunkTileEntityMap.get(pos);
+            if (entity != null && entity.isInvalid())
+            {
+                chunkTileEntityMap.remove(pos);
+            }
+        }
+    }
 }
