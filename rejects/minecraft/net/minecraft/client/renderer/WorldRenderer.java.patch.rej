++++ REJECTED PATCH 1
                 break;
             case USHORT:
             case SHORT:
-                this.byteBuffer.putShort(i, (short)((int)p_181663_1_ * 32767 & 65535));
-                this.byteBuffer.putShort(i + 2, (short)((int)p_181663_2_ * 32767 & 65535));
-                this.byteBuffer.putShort(i + 4, (short)((int)p_181663_3_ * 32767 & 65535));
+                this.byteBuffer.putShort(i, (short)((int)(p_181663_1_ * 32767) & 65535));
+                this.byteBuffer.putShort(i + 2, (short)((int)(p_181663_2_ * 32767) & 65535));
+                this.byteBuffer.putShort(i + 4, (short)((int)(p_181663_3_ * 32767) & 65535));
                 break;
             case UBYTE:
             case BYTE:
-                this.byteBuffer.put(i, (byte)((int)p_181663_1_ * 127 & 255));
-                this.byteBuffer.put(i + 1, (byte)((int)p_181663_2_ * 127 & 255));
-                this.byteBuffer.put(i + 2, (byte)((int)p_181663_3_ * 127 & 255));
+                this.byteBuffer.put(i, (byte)((int)(p_181663_1_ * 127) & 255));
+                this.byteBuffer.put(i + 1, (byte)((int)(p_181663_2_ * 127) & 255));
+                this.byteBuffer.put(i + 2, (byte)((int)(p_181663_3_ * 127) & 255));
         }
 
         this.nextVertexFormatIndex();
++++ END PATCH
++++ REJECTED PATCH 2
         }
     }
 
+    public void checkAndGrow()
+    {
+        this.growBuffer(vertexFormat.getNextOffset()/* / 4 * 4 */);
+    }
+
+    public boolean isColorDisabled()
+    {
+        return noColor;
+    }
+
     @SideOnly(Side.CLIENT)
     public class State
     {
++++ END PATCH
